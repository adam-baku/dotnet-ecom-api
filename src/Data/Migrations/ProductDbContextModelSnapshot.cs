// <auto-generated />
using Data.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(ProductDbContext))]
    partial class ProductDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Product.Domain.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AvailableQuantity")
                        .HasColumnName("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasColumnName("ProductId")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("Title")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("EntityId")
                        .IsUnique()
                        .HasName("IX_Product_ProductId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Product.Domain.Product", b =>
                {
                    b.OwnsOne("Common.Price.Price", "Price", b1 =>
                        {
                            b1.Property<long>("ProductId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnName("Currency")
                                .HasColumnType("varchar(3)");

                            b1.Property<decimal>("Gross")
                                .HasColumnName("GrossPrice")
                                .HasColumnType("decimal(7,2)");

                            b1.Property<decimal>("Net")
                                .HasColumnName("NetPrice")
                                .HasColumnType("decimal(7,2)");

                            b1.HasKey("ProductId");

                            b1.ToTable("Product");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");

                            b1.OwnsOne("Common.Price.Tax", "Tax", b2 =>
                                {
                                    b2.Property<long>("PriceProductId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("bigint")
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<decimal>("Value")
                                        .HasColumnName("TaxValue")
                                        .HasColumnType("decimal(5,2)");

                                    b2.HasKey("PriceProductId");

                                    b2.ToTable("Product");

                                    b2.WithOwner()
                                        .HasForeignKey("PriceProductId");
                                });
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
